generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  credits       Int       @default(0)
  payments      Payment[]
  projects      Project[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id               String   @id @default(uuid())
  name             String
  replicateModelId String?
  stripePaymentId  String?
  modelVersionId   String?
  modelStatus      String?
  instanceName     String
  instanceClass    String
  imageUrls        String[]
  zipImageUrl      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?
  User             User?    @relation(fields: [userId], references: [id])
  shots            Shot[]
}

model Shot {
  id          String   @id @default(uuid())
  prompt      String
  replicateId String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String?
  outputUrl   String?
  filterId    String?
  filterName  String?
  Filters     Filters? @relation(fields: [filterId], references: [id])
  Project     Project? @relation(fields: [projectId], references: [id])
}

model Filters {
  id             String   @id @default(uuid())
  name           String
  prompt         String
  createdAt      DateTime @default(now())
  exampleUrl     String
  enabled        Boolean  @default(true)
  exampleUrl_cat String?
  Shot           Shot[]
}

model Payment {
  id              String       @id @default(uuid())
  stripePaymentId String?
  amount          Int
  purchaseType    PurchaseType
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userId          String?
  paid_amount     Int
  User            User?        @relation(fields: [userId], references: [id])
}

enum PurchaseType {
  STUDIO_PURCHASE
  CREDIT_PURCHASE
  PROMOTION_STUDIO_PURCHASE
  PROMOTION_CREDIT_GIFT
}
