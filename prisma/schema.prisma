generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  credits       Int       @default(0)
  payments      Payment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id               String   @id @default(uuid())
  name             String
  replicateModelId String?
  stripePaymentId  String?
  modelVersionId   String?
  modelStatus      String?
  instanceName     String
  instanceClass    String
  imageUrls        String[]
  zipImageUrl      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?
  User             User?    @relation(fields: [userId], references: [id])
  shots            Shot[]
}

model Shot {
  id          String   @id @default(uuid())
  prompt      String
  replicateId String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String?
  outputUrl   String?
  // This is the name of the style that was used to generate this shot
  styleName   String?
  // The style id that was used to generate this shot
  styleId     String?
  Styles      Styles?  @relation(fields: [styleId], references: [id])
  Project     Project? @relation(fields: [projectId], references: [id])
}

model Styles {
  id                  String    @id @default(uuid())
  // Name of the Style
  name                String
  // Things we want to see in the output
  prompt              String
  // Things that we do NOT want to see in the output
  negative_prompt     String?   @default("")
  // Seed used to generate the style
  seed                Int
  // Prompt strength when using init image.
  // 1.0 corresponds to full destruction of information in init image
  prompt_strength     Float?    @default(0.8)
  createdAt           DateTime? @default(now())
  // Scale for classifier-free guidance (minimum: 1; maximum: 20)
  guidance_scale      Float     @default(7.5)
  // Number of denoising steps (minimum: 1; maximum: 500)
  num_inference_steps Int       @default(30)
  scheduler           String?   @default("DDIM")
  example_image_url   String
  // Whether or not this style is enabled for users
  enabled             Boolean   @default(true)

  Shot Shot[]
}

model Payment {
  id              String       @id @default(uuid())
  // Payment id for stripe
  stripePaymentId String?
  // Amount of credits purchased
  amount          Int
  // Amount of credits purchased in USD
  paid_amount     Int
  // Type of purchase that was made
  purchaseType    PurchaseType
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userId          String?
  User            User?        @relation(fields: [userId], references: [id])
}

enum PurchaseType {
  STUDIO_PURCHASE
  CREDIT_PURCHASE
  PROMOTION_STUDIO_PURCHASE
  PROMOTION_CREDIT_GIFT
}
